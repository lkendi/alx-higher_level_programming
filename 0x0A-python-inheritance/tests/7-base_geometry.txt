>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>> bg = BaseGeometry()
>>> type(bg) == BaseGeometry
True

>>> #area function
>>> bg.area()
Traceback (most recent call last):
    ...
Exception: area() is not implemented

>>> #no args
>>> bg.__class__.integer_validator()
Traceback (most recent call last):
  ...
TypeError: BaseGeometry.integer_validator() missing 3 required positional arguments: 'self', 'name', and 'value'

>>> bg.integer_validator()
Traceback (most recent call last):
  ...
TypeError: BaseGeometry.integer_validator() missing 2 required positional arguments: 'name' and 'value'

>>> #value is integer
>>> bg.integer_validator("age", 60)

>>> #value is a float
>>> bg.integer_validator("distance", 10.6)
Traceback (most recent call last):
  ...
TypeError: distance must be an integer

>>> #value is negative
>>> bg.integer_validator("length", -40)
Traceback (most recent call last):
  ...
ValueError: length must be greater than 0

>>> #value is a string
>>> bg.integer_validator("distance", "10")
Traceback (most recent call last):
    ...
TypeError: distance must be an integer

>>> #value is zero
>>> bg.integer_validator("distance", 0)
Traceback (most recent call last):
    ...
ValueError: distance must be greater than 0

>>> #value is a list
>>> bg.integer_validator("distance", [10])
Traceback (most recent call last):
    ...
TypeError: distance must be an integer

>>> #value is a tuple
>>> bg.integer_validator("distance", (10, ))
Traceback (most recent call last):
    ...
TypeError: distance must be an integer

>>> #value is a bool
>>> bg.integer_validator("distance", True)
Traceback (most recent call last):
  ...
TypeError: distance must be an integer

>>> #value is None
>>> bg.integer_validator("distance", None)
Traceback (most recent call last):
    ...
TypeError: distance must be an integer